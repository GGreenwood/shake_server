{
  "name": "request-ssl",
  "version": "0.0.9",
  "description": "Pinned SSL version of the Request library",
  "main": "index.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:jhaynie/request-ssl.git"
  },
  "keywords": [
    "request",
    "ssl",
    "https"
  ],
  "author": {
    "name": "Jeff Haynie"
  },
  "license": "Apache2",
  "bugs": {
    "url": "https://github.com/jhaynie/request-ssl/issues"
  },
  "homepage": "https://github.com/jhaynie/request-ssl",
  "dependencies": {
    "debug": "^2.1.1",
    "lodash": "^2.4.1",
    "request": "^2.51.0"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-kahvesi": "^0.1.0",
    "grunt-mocha-test": "^0.12.6",
    "mocha": "^2.1.0",
    "should": "^4.5.1",
    "wrench": "^1.5.8"
  },
  "readme": "# Request SSL [![Build Status](https://travis-ci.org/jhaynie/request-ssl.svg?branch=master)](https://travis-ci.org/jhaynie/request-ssl) [![npm version](https://badge.fury.io/js/request-ssl.svg)](http://badge.fury.io/js/request-ssl)\n\n\n## Quick Start\n\n```javascript\n$ npm install request-ssl\n```\n\n## Overview \n\nPinned SSL version of the Node.JS [Request](https://github.com/request/request) library by Mikeal Rogers.\n\nThis can be used in place of the request library to support [SSL Certificate Pinning](https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning).\n\nFor SSL, HTTP clients will establish a secure connection with a remote server when HTTPS is the protocol.  The client and server will exchange certificates as a way to establish secure communication.  By default, the client blindly trusts that the server presenting the SSL Certificate is who they say they are.  However, how does the client trust that the server presenting the SSL certificate is you think that they are?\n\nUsing SSL pinning in the client, the client will verify that the SSL Certificate being presented by the server matches the SHA1 fingerprint of the X.509 Certificate's public key.  If the SHA1 matches the fingerprint for the domain that you expect, then you can proceed with the communication.\n\n## Usage\n\nFirst, you should get the SHA1 fingerprint from your server.  Make sure you get the final URL if the server performs 301/302 HTTP redirects.\n\nYou can use the openssl tool (if you have it installed on your system):\n\n```\nopenssl x509  -noout -fingerprint -sha1 -in <(openssl x509 -in <(openssl s_client -connect www.google.com:443 -prexit 2>/dev/null))\n```\n\nThe output should be something like:\n\n```\nSHA1 Fingerprint=AD:B8:73:14:D5:26:84:AD:CC:6D:DE:34:09:08:DD:A4:96:F9:B2:90\n```\n\nOptionally, you can also use your browser to get the fingerprint.  In your browser, typically, there is a lock in the URL bar for a HTTPS URL. If you click on the lock you usually can get details about the certificate and can find the SHA1 fingerprint string.\n\nThe other easy way is to use a [fingerprint site](https://www.grc.com/fingerprints.htm).\n\nYou should use this fingerprint such as:\n\n```javascript\nvar request = require('request-ssl');\nrequest.addFingerprint('www.google.com', 'AD:B8:73:14:D5:26:84:AD:CC:6D:DE:34:09:08:DD:A4:96:F9:B2:90');\nrequest('https://www.google.com',function(err,resp,body){\n    // if you get here, it should be secure\n});\n```\n\nYou can also load fingerprints by domain from a file directory.\n\n```javascript\nvar request = require('request-ssl');\nrequest.addFingerprintDirectory('./mydirectory');\nrequest('https://www.google.com',function(err,resp,body){\n    // if you get here, it should be secure\n});\n```\n\nThe filename should be the name of the domain (without protocol and with no file extension).  The contents of the file should be the fingerprint.\n\nYou can have multiple fingerprints in the directory, in which case all fingerprints will be added.\n\n## API\n\n- `addFingerprint(name,fingerprint)`: add a fingerprint\n- `addFingerprintDirectory(directory)`: add one or more fingerprints from directory\n- `removeFingerprint(name)`: remove a named fingerprint\n- `removeAllFingerprints`: remove all fingerprints\n- `setDefaultSecureProtocol(protocol)`: set the default protocol to use for `agentOptions`\n- `getLastURL`: called to return the very last url pinned\n- `getFingerprintForURL(url,callback)`: get a fingerprint for a url. (only available on machines with openssl binary such as OSX and Linux. For Win32, you have to install openssl to use this)\n\nIn addition to the APIs above, all APIs that are on the `request` library are also available (such as `get`, `post`, etc).  This library should be a drop-in replacement for the request library.\n\n## Debugging\n\nYou can turn on debug logging to help aid debugging.\n\nRun your application and set the environment variable `DEBUG` to `request-ssl` such as:\n\n```bash\nDEBUG=request-ssl node app\n```\n\nThis should print a lot of debug logging to the console which should provide more information about each request.\n\n## Licensing\n\nThis library was written by [Jeff Haynie](https://github.com/jhaynie) / [@jhaynie](http://twitter.com/jhaynie).  Copyright(c) 2015 by Jeff Haynie. All Rights Reserved. Licensed under the [Apache Public License, version 2](http://www.apache.org/licenses/LICENSE-2.0).  See the LICENSE file for more details.\n\n\n",
  "readmeFilename": "README.md",
  "_id": "request-ssl@0.0.9",
  "dist": {
    "shasum": "31345e2a2fda7f96c288c580ec4a5f7683187c09"
  },
  "_from": "request-ssl@",
  "_resolved": "https://registry.npmjs.org/request-ssl/-/request-ssl-0.0.9.tgz"
}
